name: Playwright Tests

on:
  workflow_call:
    inputs:
      grafana-version:
        required: true
        type: string
      with-firefox:
        required: false
        type: boolean
        default: false
      upload-artifacts:
        required: false
        type: boolean
        default: true
jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      repo_lc: ${{ steps.lowercase.outputs.repo_lc }}
    steps:
      - id: lowercase
        run: echo "repo_lc=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

  build-and-push-image:
    runs-on: ubuntu-22.04
    needs: prepare
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build plugin
        run: npm run build

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build custom Grafana image
        run: |        
          docker build \
            --build-arg grafana_version=${{ inputs.grafana-version }} \
            -t ghcr.io/${{ needs.prepare.outputs.repo_lc }}/grafana-warp10:${{ inputs.grafana-version }} \
            -f tests/config/Dockerfile.grafana .

      - name: Push image to ghcr.io
        run: docker push ghcr.io/${{ needs.prepare.outputs.repo_lc }}/grafana-warp10:${{ inputs.grafana-version }}

  test:
    needs: [prepare, build-and-push-image]
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    services:
      warp10:
        image: warp10io/warp10:3.5.0-alpine
        ports:
          - 8080:8080
          - 8081:8081
        options: >-
          --health-cmd="curl -f -XPOST -d 'RETURN 1' http://localhost:8080/api/v0/exec"
          --health-interval=10s --health-timeout=5s --health-retries=10

      grafana:
        image: ghcr.io/${{ needs.prepare.outputs.repo_lc }}/grafana-warp10:${{ inputs.grafana-version }}
        ports:
          - 3000:3000
        env:
          GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: clevercloud-warp10-datasource
          WARP10_URL: http://warp10:8080
          GF_PATHS_PROVISIONING: /etc/grafana/provisioning
          GF_LOG_LEVEL: debug
        options: >-
          --health-cmd="curl -f http://localhost:3000/api/health"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Wait for Grafana to be healthy
        run: |
          echo "Waiting for Grafana to be healthy..."
          for i in {1..30}; do
            STATUS=$(docker ps --filter "name=grafana" --format "{{.ID}}" | head -n 1)
            if [ ! -z "$STATUS" ]; then
              if curl -fs http://localhost:3000/api/health; then
                echo "Grafana is up!"
                exit 0
              fi
            fi
            echo "Grafana not ready... retrying in 5s"
            sleep 5
          done
          echo "Grafana did not become healthy in time."
          docker ps -a
          exit 1

      - name: Run Playwright tests (Chromium)
        run: npx playwright test --project=chromium

      - name: Run Playwright tests (Firefox)
        if: inputs.with-firefox == true
        run: npx playwright test --project=firefox

      - name: Upload test results
        if: always() && inputs.upload-artifacts == true
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload service logs
        if: always() && inputs.upload-artifacts == true
        run: |
          GRAFANA_CID=$(docker ps --filter "name=grafana" --format "{{.ID}}" | head -n 1)
          WARP10_CID=$(docker ps --filter "name=warp10" --format "{{.ID}}" | head -n 1)
          docker logs $GRAFANA_CID > grafana.log 2>&1 || echo "Failed to get Grafana logs"
          docker logs $WARP10_CID > warp10.log 2>&1 || echo "Failed to get Warp10 logs"

      - name: Upload service logs as artifacts
        if: always() && inputs.upload-artifacts == true
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: |
            grafana.log
            warp10.log
